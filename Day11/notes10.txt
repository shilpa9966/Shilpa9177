Conversation opened. 1 unread message.

Skip to content
Using Gmail with screen readers
1 of 82
Fwd: eCart
Inbox

RAKESH Raki <derangirakesh@gmail.com>
Attachments
11:20 (8 minutes ago)
to Nandhini, TS, Tnarasimha, Navamohan, Naveen, anavyasree500, N√∏wsh√•d, pavankumapk03, Pavan, punith, redditejasurappagari123, donthollusagarika828, Preethi, Sai, sanyadeepthe, kumar7d1432, Thulasi, me, siri999811siri1819, SHOT, Shiva, Sowmya, Lilly, G, SRIKAR, Ellala, Chinnu, Puday, Uday, ummaesalma7861, Upendra, aaushasree, Vamsi, Varsha, Chitimi, Kalupati, venki12617, N, AK, chruthakanti, yaswanth2k3, Yuva, zuhanaaz6055



---------- Forwarded message ---------
From: Navamohan Reddy <navamohanreddy495@gmail.com>
Date: Fri, Jul 11, 2025 at 11:19‚ÄØAM
Subject: Fwd: eCart
To: RAKESH Raki <derangirakesh@gmail.com>



---------- Forwarded message ---------
From: Praveen Choudhary <praveen.nsic@gmail.com>
Date: Fri, 11 Jul, 2025, 11:18‚ÄØam
Subject: eCart
To: Navamohan Reddy <navamohanreddy495@gmail.com>


#views.py
def student_detail(request):
    stu=['shiva','navmohan','shravani','salma']
    return render(request,
                  'student_detail.html',
                  {'data': stu})

#student-detail.html


<!DOCTYPE html>
<html>
<head>
    <title>Student Catalog</title>
   
<body>
    <h1>Students</h1>
    {% for i in data %}
 <div>
            <p>{{ i }}</p>
        </div>
    {% endfor %}
</body>
</html>
One attachment
  ‚Ä¢ Scanned by Gmail
A simple E-commerce Product Catalog in Django with step-by-step code.
This will include:
‚úÖ Project setup
‚úÖ Product model
‚úÖ Views (list, detail)
‚úÖ Templates
‚úÖ Basic styling


‚úÖ Step 1: Create Django Project and App

django-admin startproject ecommerce
cd ecommerce
python manage.py startapp catalog

‚úÖ Step 2: Update settings
In ecommerce/settings.py:


INSTALLED_APPS = [
    ...
    'catalog',
]
‚úÖ Step 3: Define Product Model
In catalog/models.py:


from django.db import models

class Product(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    price = models.DecimalField(max_digits=8, decimal_places=2)
    image = models.ImageField(upload_to='products/', blank=True, null=True)

    def __str__(self):
        return self.name

‚úÖ Step 4: Make migrations

python manage.py makemigrations 
python manage.py migrate

‚úÖ Step 5: Create Admin interface
In catalog/admin.py:


from django.contrib import admin
from .models import Product

admin.site.register(Product)


Create superuser:

python manage.py createsuperuser
test/123

Run server and add some products:
python manage.py runserver
Go to http://127.0.0.1:8000/admin/

‚úÖ Step 6: Create Views
In catalog/views.py:


from django.shortcuts import render, get_object_or_404
from .models import Product


def product_list(request):
    ob_products = Product.objects.all()
    return render(request, 'product_list.html', {'products': ob_products})

def product_detail(request, pk):
    ob_product = get_object_or_404(Product, pk=pk)
    return render(request, 'product_detail.html', {'product': ob_product})

‚úÖ Step 7a: Add URLs
In catalog/urls.py (create file):


from django.urls import path
from . import views

urlpatterns = [
    path('', views.product_list, name='product_list'),
    path('product/<int:pk>/', views.product_detail, name='product_detail'),
]

‚úÖ Step 7b: Add URLs
In ecommerce/urls.py:


from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('catalog.urls')),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

‚úÖ Step 8: Create Templates
Inside catalog app, create folder: templates/

product_list.html

<!DOCTYPE html>
<html>
<head>
    <title>Product Catalog</title>
    <style>
        img { max-width: 150px; }
        .product { border: 1px solid #ccc; padding: 10px; margin: 10px; display: inline-block; }
    </style>
</head>
<body>
    <h1>Products</h1>
    {% for product in products %}
        <div class="product">
            {% if product.image %}
                <img src="{{ product.image.url }}" alt="{{ product.name }}">
            {% endif %}
            <h2><a href="{% url 'product_detail' product.pk %}">{{ product.name }}</a></h2>
            <p>${{ product.price }}</p>
        </div>
    {% endfor %}
</body>
</html>


product_detail.html

<!DOCTYPE html>
<html>
<head>
    <title>{{ product.name }}</title>
</head>
<body>
    <h1>{{ product.name }}</h1>
    {% if product.image %}
        <img src="{{ product.image.url }}" alt="{{ product.name }}">
    {% endif %}
    <p>{{ product.description }}</p>
    <p>Price: Rs{{ product.price }}</p>
    <a href="/">Back to Products</a>
</body>
</html>


‚úÖ Step 9: Configure Media files
In ecommerce/settings.py, add:


MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

‚úÖ Step 10: Test it
Run server:


python manage.py runserver

Visit:
http://127.0.0.1:8000/         ‚Üí product list

Click product ‚Üí product detail

‚úÖ Done! üéâ
You now have a simple E-commerce product catalog with:

Admin interface

Product listing & detail page

Images

‚≠ê Next steps (if you want):
Categories

Search/filter

Cart & checkout

User authentication

Order history
eKart.txt
Displaying eKart.txt.